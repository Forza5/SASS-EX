//파일 중첩
// 계층구조로 스타일 적용 가능

// ex 1
nav {
    background: lightskyblue;
    padding: 10px;
    height: 50px;
    ul {
        display: flex;
        justify-content: flex-end;
        list-style: none;
        li {
            color: #fff;
            margin-right: 10px;
        }
    }
}

// ex 2
.background-img {
    width: 100%;
    height: auto;
    background: {
        image: url(".sample.jpg");
        position: center center;
        repeat: no-repeat;
    };
}

// ex 3
.box {
    width: 300px;
    height: 300px;
    background-color: red;
    transition: all 1s;
    &:hover {
        background-color: blue;
    }
}

// ex 4
.one {
    color: red;
    .two {
        color: green;
        .three {
            color: blue;
            @at-root p {
                color: lightskyblue;
            }
        }
    }
}

// - scss에서 파일명 앞에 언더바_를 붙이는 이유
//     - Partial: _(언더스코어)를 붙이지 않는다면 분할 된 파일 모두가 컴파일 되기 때문에 여러 개의 .css파일이 나눠서 저장된다.
//     그러나 scss파일 이름 앞에 '_(언더스코어)'를 붙여 파일명을 정하면, sass에게 이 파일이 main파일의 일부분임을 알려줌
//     따라서 해당 파일은 css파일로 컴파일 하지 않고, 내부에서 @import 형태로 작동한다.
    
//     - css는 import할 때 파일 URL을 적어줘야하지만, sass에서 import할 때는 확장명을 제외하고 파일명만 사용 가능하다.

// - 중첩을 사용하는 이유
/*
 - 기존 CSS는 부모에게 상속된 자식요소에게 스타일을 적용하려고 할 때마다 최상위 선택자를 반복 선언해야한다.
 -- 하지만 중첩(Nesting)을 사용하면 최상위 선택자를 한번만 선언하여도 자식 선택자에게 스타일을 적용할 수 있게 되어 코드 반복을 줄이게 된다.

 주의) 지나치게 중첩된 코드는 삼가!! -> 깊이 중첩되면 코드를 보는게 불편하고 컴파일 했을경우 불필요한 선택자를 사용하게 된다!!!
*/

// 속성 Nesting
// 대표적 예시 background
/*
    -> .add-icon {
        background : {
            image: url("./assets/arrow-right-solid.svg");
            position: center center;
            repeat: no-repeat;
            size: 14px 14px;
        }
    }
*/